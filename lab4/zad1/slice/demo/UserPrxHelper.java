// **********************************************************************
//
// Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.2
//
// <auto-generated>
//
// Generated from file `Demo.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package demo;

/**
 * Provides type-specific helper functions.
 **/
public final class UserPrxHelper extends Ice.ObjectPrxHelperBase implements UserPrx
{
    private static final String __changeName_name = "changeName";

    public void changeName(Name name1)
    {
        changeName(name1, null, false);
    }

    public void changeName(Name name1, java.util.Map<String, String> __ctx)
    {
        changeName(name1, __ctx, true);
    }

    private void changeName(Name name1, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        end_changeName(begin_changeName(name1, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_changeName(Name name1)
    {
        return begin_changeName(name1, null, false, false, null);
    }

    public Ice.AsyncResult begin_changeName(Name name1, java.util.Map<String, String> __ctx)
    {
        return begin_changeName(name1, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_changeName(Name name1, Ice.Callback __cb)
    {
        return begin_changeName(name1, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_changeName(Name name1, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_changeName(name1, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_changeName(Name name1, Callback_User_changeName __cb)
    {
        return begin_changeName(name1, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_changeName(Name name1, java.util.Map<String, String> __ctx, Callback_User_changeName __cb)
    {
        return begin_changeName(name1, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_changeName(Name name1, 
                                            IceInternal.Functional_VoidCallback __responseCb, 
                                            IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_changeName(name1, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_changeName(Name name1, 
                                            IceInternal.Functional_VoidCallback __responseCb, 
                                            IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                            IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_changeName(name1, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_changeName(Name name1, 
                                            java.util.Map<String, String> __ctx, 
                                            IceInternal.Functional_VoidCallback __responseCb, 
                                            IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_changeName(name1, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_changeName(Name name1, 
                                            java.util.Map<String, String> __ctx, 
                                            IceInternal.Functional_VoidCallback __responseCb, 
                                            IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                            IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_changeName(name1, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_changeName(Name name1, 
                                             java.util.Map<String, String> __ctx, 
                                             boolean __explicitCtx, 
                                             boolean __synchronous, 
                                             IceInternal.Functional_VoidCallback __responseCb, 
                                             IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                             IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_changeName(name1, 
                                __ctx, 
                                __explicitCtx, 
                                __synchronous, 
                                new IceInternal.Functional_OnewayCallback(__responseCb, __exceptionCb, __sentCb));
    }

    private Ice.AsyncResult begin_changeName(Name name1, 
                                             java.util.Map<String, String> __ctx, 
                                             boolean __explicitCtx, 
                                             boolean __synchronous, 
                                             IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__changeName_name, __cb);
        try
        {
            __result.prepare(__changeName_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            Name.__write(__os, name1);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public void end_changeName(Ice.AsyncResult __iresult)
    {
        __end(__iresult, __changeName_name);
    }

    private static final String __getId_name = "getId";

    public long getId()
    {
        return getId(null, false);
    }

    public long getId(java.util.Map<String, String> __ctx)
    {
        return getId(__ctx, true);
    }

    private long getId(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__getId_name);
        return end_getId(begin_getId(__ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_getId()
    {
        return begin_getId(null, false, false, null);
    }

    public Ice.AsyncResult begin_getId(java.util.Map<String, String> __ctx)
    {
        return begin_getId(__ctx, true, false, null);
    }

    public Ice.AsyncResult begin_getId(Ice.Callback __cb)
    {
        return begin_getId(null, false, false, __cb);
    }

    public Ice.AsyncResult begin_getId(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getId(__ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_getId(Callback_User_getId __cb)
    {
        return begin_getId(null, false, false, __cb);
    }

    public Ice.AsyncResult begin_getId(java.util.Map<String, String> __ctx, Callback_User_getId __cb)
    {
        return begin_getId(__ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_getId(IceInternal.Functional_LongCallback __responseCb, 
                                       IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_getId(null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_getId(IceInternal.Functional_LongCallback __responseCb, 
                                       IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                       IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getId(null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_getId(java.util.Map<String, String> __ctx, 
                                       IceInternal.Functional_LongCallback __responseCb, 
                                       IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_getId(__ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_getId(java.util.Map<String, String> __ctx, 
                                       IceInternal.Functional_LongCallback __responseCb, 
                                       IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                       IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getId(__ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_getId(java.util.Map<String, String> __ctx, 
                                        boolean __explicitCtx, 
                                        boolean __synchronous, 
                                        IceInternal.Functional_LongCallback __responseCb, 
                                        IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                        IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getId(__ctx, __explicitCtx, __synchronous, 
                           new IceInternal.Functional_TwowayCallbackLong(__responseCb, __exceptionCb, __sentCb)
                               {
                                   public final void __completed(Ice.AsyncResult __result)
                                   {
                                       UserPrxHelper.__getId_completed(this, __result);
                                   }
                               });
    }

    private Ice.AsyncResult begin_getId(java.util.Map<String, String> __ctx, 
                                        boolean __explicitCtx, 
                                        boolean __synchronous, 
                                        IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getId_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__getId_name, __cb);
        try
        {
            __result.prepare(__getId_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            __result.writeEmptyParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public long end_getId(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __getId_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            long __ret;
            __ret = __is.readLong();
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __getId_completed(Ice.TwowayCallbackLong __cb, Ice.AsyncResult __result)
    {
        demo.UserPrx __proxy = (demo.UserPrx)__result.getProxy();
        long __ret = 0;
        try
        {
            __ret = __proxy.end_getId(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __getName_name = "getName";

    public Name getName()
    {
        return getName(null, false);
    }

    public Name getName(java.util.Map<String, String> __ctx)
    {
        return getName(__ctx, true);
    }

    private Name getName(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__getName_name);
        return end_getName(begin_getName(__ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_getName()
    {
        return begin_getName(null, false, false, null);
    }

    public Ice.AsyncResult begin_getName(java.util.Map<String, String> __ctx)
    {
        return begin_getName(__ctx, true, false, null);
    }

    public Ice.AsyncResult begin_getName(Ice.Callback __cb)
    {
        return begin_getName(null, false, false, __cb);
    }

    public Ice.AsyncResult begin_getName(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getName(__ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_getName(Callback_User_getName __cb)
    {
        return begin_getName(null, false, false, __cb);
    }

    public Ice.AsyncResult begin_getName(java.util.Map<String, String> __ctx, Callback_User_getName __cb)
    {
        return begin_getName(__ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_getName(IceInternal.Functional_GenericCallback1<Name> __responseCb, 
                                         IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_getName(null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_getName(IceInternal.Functional_GenericCallback1<Name> __responseCb, 
                                         IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                         IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getName(null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_getName(java.util.Map<String, String> __ctx, 
                                         IceInternal.Functional_GenericCallback1<Name> __responseCb, 
                                         IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_getName(__ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_getName(java.util.Map<String, String> __ctx, 
                                         IceInternal.Functional_GenericCallback1<Name> __responseCb, 
                                         IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                         IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getName(__ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_getName(java.util.Map<String, String> __ctx, 
                                          boolean __explicitCtx, 
                                          boolean __synchronous, 
                                          IceInternal.Functional_GenericCallback1<Name> __responseCb, 
                                          IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                          IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getName(__ctx, __explicitCtx, __synchronous, 
                             new IceInternal.Functional_TwowayCallbackArg1<demo.Name>(__responseCb, __exceptionCb, __sentCb)
                                 {
                                     public final void __completed(Ice.AsyncResult __result)
                                     {
                                         UserPrxHelper.__getName_completed(this, __result);
                                     }
                                 });
    }

    private Ice.AsyncResult begin_getName(java.util.Map<String, String> __ctx, 
                                          boolean __explicitCtx, 
                                          boolean __synchronous, 
                                          IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getName_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__getName_name, __cb);
        try
        {
            __result.prepare(__getName_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            __result.writeEmptyParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public Name end_getName(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __getName_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            Name __ret = null;
            __ret = Name.__read(__is, __ret);
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __getName_completed(Ice.TwowayCallbackArg1<Name> __cb, Ice.AsyncResult __result)
    {
        demo.UserPrx __proxy = (demo.UserPrx)__result.getProxy();
        Name __ret = null;
        try
        {
            __ret = __proxy.end_getName(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __getTimestamp_name = "getTimestamp";

    public long getTimestamp()
    {
        return getTimestamp(null, false);
    }

    public long getTimestamp(java.util.Map<String, String> __ctx)
    {
        return getTimestamp(__ctx, true);
    }

    private long getTimestamp(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__getTimestamp_name);
        return end_getTimestamp(begin_getTimestamp(__ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_getTimestamp()
    {
        return begin_getTimestamp(null, false, false, null);
    }

    public Ice.AsyncResult begin_getTimestamp(java.util.Map<String, String> __ctx)
    {
        return begin_getTimestamp(__ctx, true, false, null);
    }

    public Ice.AsyncResult begin_getTimestamp(Ice.Callback __cb)
    {
        return begin_getTimestamp(null, false, false, __cb);
    }

    public Ice.AsyncResult begin_getTimestamp(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getTimestamp(__ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_getTimestamp(Callback_User_getTimestamp __cb)
    {
        return begin_getTimestamp(null, false, false, __cb);
    }

    public Ice.AsyncResult begin_getTimestamp(java.util.Map<String, String> __ctx, Callback_User_getTimestamp __cb)
    {
        return begin_getTimestamp(__ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_getTimestamp(IceInternal.Functional_LongCallback __responseCb, 
                                              IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_getTimestamp(null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_getTimestamp(IceInternal.Functional_LongCallback __responseCb, 
                                              IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                              IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getTimestamp(null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_getTimestamp(java.util.Map<String, String> __ctx, 
                                              IceInternal.Functional_LongCallback __responseCb, 
                                              IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_getTimestamp(__ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_getTimestamp(java.util.Map<String, String> __ctx, 
                                              IceInternal.Functional_LongCallback __responseCb, 
                                              IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                              IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getTimestamp(__ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_getTimestamp(java.util.Map<String, String> __ctx, 
                                               boolean __explicitCtx, 
                                               boolean __synchronous, 
                                               IceInternal.Functional_LongCallback __responseCb, 
                                               IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                               IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getTimestamp(__ctx, __explicitCtx, __synchronous, 
                                  new IceInternal.Functional_TwowayCallbackLong(__responseCb, __exceptionCb, __sentCb)
                                      {
                                          public final void __completed(Ice.AsyncResult __result)
                                          {
                                              UserPrxHelper.__getTimestamp_completed(this, __result);
                                          }
                                      });
    }

    private Ice.AsyncResult begin_getTimestamp(java.util.Map<String, String> __ctx, 
                                               boolean __explicitCtx, 
                                               boolean __synchronous, 
                                               IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getTimestamp_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__getTimestamp_name, __cb);
        try
        {
            __result.prepare(__getTimestamp_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            __result.writeEmptyParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public long end_getTimestamp(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __getTimestamp_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            long __ret;
            __ret = __is.readLong();
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __getTimestamp_completed(Ice.TwowayCallbackLong __cb, Ice.AsyncResult __result)
    {
        demo.UserPrx __proxy = (demo.UserPrx)__result.getProxy();
        long __ret = 0;
        try
        {
            __ret = __proxy.end_getTimestamp(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static UserPrx checkedCast(Ice.ObjectPrx __obj)
    {
        return checkedCastImpl(__obj, ice_staticId(), UserPrx.class, UserPrxHelper.class);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @param __ctx The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static UserPrx checkedCast(Ice.ObjectPrx __obj, java.util.Map<String, String> __ctx)
    {
        return checkedCastImpl(__obj, __ctx, ice_staticId(), UserPrx.class, UserPrxHelper.class);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @param __facet The name of the desired facet.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static UserPrx checkedCast(Ice.ObjectPrx __obj, String __facet)
    {
        return checkedCastImpl(__obj, __facet, ice_staticId(), UserPrx.class, UserPrxHelper.class);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @param __facet The name of the desired facet.
     * @param __ctx The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static UserPrx checkedCast(Ice.ObjectPrx __obj, String __facet, java.util.Map<String, String> __ctx)
    {
        return checkedCastImpl(__obj, __facet, __ctx, ice_staticId(), UserPrx.class, UserPrxHelper.class);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param __obj The untyped proxy.
     * @return A proxy for this type.
     **/
    public static UserPrx uncheckedCast(Ice.ObjectPrx __obj)
    {
        return uncheckedCastImpl(__obj, UserPrx.class, UserPrxHelper.class);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param __obj The untyped proxy.
     * @param __facet The name of the desired facet.
     * @return A proxy for this type.
     **/
    public static UserPrx uncheckedCast(Ice.ObjectPrx __obj, String __facet)
    {
        return uncheckedCastImpl(__obj, __facet, UserPrx.class, UserPrxHelper.class);
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::demo::User"
    };

    /**
     * Provides the Slice type ID of this type.
     * @return The Slice type ID.
     **/
    public static String ice_staticId()
    {
        return __ids[1];
    }

    public static void __write(IceInternal.BasicStream __os, UserPrx v)
    {
        __os.writeProxy(v);
    }

    public static UserPrx __read(IceInternal.BasicStream __is)
    {
        Ice.ObjectPrx proxy = __is.readProxy();
        if(proxy != null)
        {
            UserPrxHelper result = new UserPrxHelper();
            result.__copyFrom(proxy);
            return result;
        }
        return null;
    }

    public static final long serialVersionUID = 0L;
}
